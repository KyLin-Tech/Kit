using System;
using UnityEngine;

public static class UtilityTexture
{
    /// <summary>
    /// 正常rgb 融合
    /// </summary>
    /// <param name="background"></param>
    /// <param name="cover"></param>
    /// <returns></returns>
    public static Color NormalBlend_RGB(Color background, Color cover)
    {
        float CoverAlpha = cover.a;
        Color blendColor;
        blendColor.r = cover.r * CoverAlpha + background.r * (1 - CoverAlpha);
        blendColor.g = cover.g * CoverAlpha + background.g * (1 - CoverAlpha);
        blendColor.b = cover.b * CoverAlpha + background.b * (1 - CoverAlpha);
        blendColor.a = 1;
        return blendColor;
    }

    /// <summary>
    /// 带有A 通道得融合
    /// </summary>
    /// <param name="background"></param>
    /// <param name="cover"></param>
    /// <returns></returns>
    public static Color NormalBlend_RGBA(Color background, Color cover)
    {
        // float CoverAlpha = cover.a;
        Color blendColor;
        blendColor.a = cover.a + background.a * (1 - cover.a);
        blendColor.r = (cover.r * cover.a + background.r * background.a * (1 - cover.a)) / (blendColor.a);
        blendColor.g = (cover.g * cover.a + background.g * background.a * (1 - cover.a)) / (blendColor.a);
        blendColor.b = (cover.b * cover.a + background.b * background.a * (1 - cover.a)) / (blendColor.a);
        return blendColor;
    }

    public static Texture2D CopyT2DToWrite(Texture2D source)
    {
        // 先把Texture2D转成临时的RenderTexture
        RenderTexture renderTex = RenderTexture.GetTemporary(
            source.width,
            source.height
            , 0,
            RenderTextureFormat.Default,
            RenderTextureReadWrite.Linear
        );
        Graphics.Blit(source, renderTex);
        RenderTexture previous = RenderTexture.active;
        RenderTexture.active = renderTex;
        // 复制进新的Texture2D
        Texture2D readableText = new Texture2D(source.width, source.height);
        readableText.ReadPixels(new Rect(0, 0, renderTex.width, renderTex.height), 0, 0);
        readableText.Apply();
        // 恢复_释放 RenderTexture
        RenderTexture.active = previous;
        RenderTexture.ReleaseTemporary(renderTex);
        return readableText;
    }

    public static Texture2D MergeTexture2D(Color baseColor, Texture2D sprite)
    {
        Texture2D tex2d = new Texture2D(sprite.width, sprite.height);
        Color32[] color32s = sprite.GetPixels32();
        for (var i = 0; i < color32s.Length; i++)
        {
            color32s[i] = NormalBlend_RGBA(baseColor, color32s[i]);
        }

        tex2d.SetPixels32(color32s);
        tex2d.Apply();
        return tex2d;
    }

    public static Texture2D MergeTexture2D(this Texture2D target, Color baseColor, Texture2D addit)
    {
        if (target.width != addit.width && target.height != addit.height)
        {
            Debug.LogErrorFormat("当前合并贴图错误 宽度不匹配 无法合并 {0} {1}", target, addit);
            return target;
        }

        Color32[] color32s = addit.GetPixels32();
        for (var i = 0; i < color32s.Length; i++)
        {
            color32s[i] = NormalBlend_RGBA(baseColor, color32s[i]);
        }

        target.SetPixels32(color32s);
        target.Apply();
        return target;
    }


    public static Texture2D MergeImage(Texture2D[] tex)
    {
        if (tex.Length == 0)
        {
            return null;
        }

        //定义新图的宽高， 合并分为两种情况水平方向合并、垂直方向合并
        int width = 0, height = 0;
        for (int i = 0; i < tex.Length; i++)
        {
            width += tex[i].width;
            if (i > 0)
            {
                //新图的高度，这里筛选为最高
                if (tex[i].height > tex[i - 1].height)
                {
                    height = tex[i].height;
                }
            }
            else height = tex[i].height; //只有一张图
        }

        //初始Texture2D
        Texture2D texture2D = new Texture2D(width, height);
        int x = 0, y = 0;
        for (int i = 0; i < tex.Length; i++)
        {
            //取图
            Color32[] color = tex[i].GetPixels32(0);

            //赋给新图
            if (i > 0)
            {
                //texture2D.SetPixels32(x, y+=tex[i-1].height, tex[i].width, tex[i].height, color); //高度
                texture2D.SetPixels32(x += tex[i - 1].width, y, tex[i].width, tex[i].height, color); //宽度
            }
            else
            {
                texture2D.SetPixels32(x, y, tex[i].width, tex[i].height, color);
            }
        }

        //应用
        texture2D.Apply();
        return texture2D;
    }

    /// <summary>
    /// 合并贴图
    /// </summary>
    /// <param name="texs">贴图</param>
    /// <param name="offsets">贴图位置,左下角(0,0)</param>
    /// <param name="size">自己贴图的大小</param>
    /// <returns></returns>
    public static Texture2D Combine(Texture2D[] texs, ValueTuple<int, int>[] offsets, int size)
    {
        Texture2D @out = new Texture2D(size, size, TextureFormat.RGBA32, true);
        for (int i = 0; i < texs.Length; i++)
        {
            var tex = texs[i];
            var offest = offsets[i];
            var width = tex.width;
            var height = tex.height;
            RenderTexture tmp = RenderTexture.GetTemporary(width, height,
                0, RenderTextureFormat.Default,
                RenderTextureReadWrite.Linear);
            Graphics.Blit(tex, tmp);
            RenderTexture previous = RenderTexture.active;
            RenderTexture.active = tmp;
            Texture2D @new = new Texture2D(width, height);
            @new.ReadPixels(new Rect(0, 0, width, height), 0, 0);
            @new.Apply();
            @out.SetPixels(offest.Item1, offest.Item2, width, height, @new.GetPixels());
            RenderTexture.active = previous;
            RenderTexture.ReleaseTemporary(tmp);
        }

        @out.Apply();
        return @out;
    }

    /// <summary> 双线性插值法缩放图片，等比缩放 </summary>
    public static Texture2D ScaleTextureBilinear(Texture2D originalTexture, float scaleFactor)
    {
        Texture2D newTexture = new Texture2D(Mathf.CeilToInt(originalTexture.width * scaleFactor),
            Mathf.CeilToInt(originalTexture.height * scaleFactor));
        float scale = 1.0f / scaleFactor;
        int maxX = originalTexture.width - 1;
        int maxY = originalTexture.height - 1;
        for (int y = 0; y < newTexture.height; y++)
        {
            for (int x = 0; x < newTexture.width; x++)
            {
                float targetX = x * scale;
                float targetY = y * scale;
                int x1 = Mathf.Min(maxX, Mathf.FloorToInt(targetX));
                int y1 = Mathf.Min(maxY, Mathf.FloorToInt(targetY));
                int x2 = Mathf.Min(maxX, x1 + 1);
                int y2 = Mathf.Min(maxY, y1 + 1);

                float u = targetX - x1;
                float v = targetY - y1;
                float w1 = (1 - u) * (1 - v);
                float w2 = u * (1 - v);
                float w3 = (1 - u) * v;
                float w4 = u * v;
                Color color1 = originalTexture.GetPixel(x1, y1);
                Color color2 = originalTexture.GetPixel(x2, y1);
                Color color3 = originalTexture.GetPixel(x1, y2);
                Color color4 = originalTexture.GetPixel(x2, y2);
                Color color = new Color(Mathf.Clamp01(color1.r * w1 + color2.r * w2 + color3.r * w3 + color4.r * w4),
                    Mathf.Clamp01(color1.g * w1 + color2.g * w2 + color3.g * w3 + color4.g * w4),
                    Mathf.Clamp01(color1.b * w1 + color2.b * w2 + color3.b * w3 + color4.b * w4),
                    Mathf.Clamp01(color1.a * w1 + color2.a * w2 + color3.a * w3 + color4.a * w4)
                );
                newTexture.SetPixel(x, y, color);
            }
        }

        newTexture.Apply();
        return newTexture;
    }

    /// <summary> 双线性插值法缩放图片为指定尺寸 </summary>
    public static Texture2D SizeTextureBilinear(Texture2D originalTexture, Vector2 size)
    {
        Texture2D newTexture = new Texture2D(Mathf.CeilToInt(size.x), Mathf.CeilToInt(size.y));
        float scaleX = originalTexture.width / size.x;
        float scaleY = originalTexture.height / size.y;
        int maxX = originalTexture.width - 1;
        int maxY = originalTexture.height - 1;
        for (int y = 0; y < newTexture.height; y++)
        {
            for (int x = 0; x < newTexture.width; x++)
            {
                float targetX = x * scaleX;
                float targetY = y * scaleY;
                int x1 = Mathf.Min(maxX, Mathf.FloorToInt(targetX));
                int y1 = Mathf.Min(maxY, Mathf.FloorToInt(targetY));
                int x2 = Mathf.Min(maxX, x1 + 1);
                int y2 = Mathf.Min(maxY, y1 + 1);

                float u = targetX - x1;
                float v = targetY - y1;
                float w1 = (1 - u) * (1 - v);
                float w2 = u * (1 - v);
                float w3 = (1 - u) * v;
                float w4 = u * v;
                Color color1 = originalTexture.GetPixel(x1, y1);
                Color color2 = originalTexture.GetPixel(x2, y1);
                Color color3 = originalTexture.GetPixel(x1, y2);
                Color color4 = originalTexture.GetPixel(x2, y2);
                Color color = new Color(Mathf.Clamp01(color1.r * w1 + color2.r * w2 + color3.r * w3 + color4.r * w4),
                    Mathf.Clamp01(color1.g * w1 + color2.g * w2 + color3.g * w3 + color4.g * w4),
                    Mathf.Clamp01(color1.b * w1 + color2.b * w2 + color3.b * w3 + color4.b * w4),
                    Mathf.Clamp01(color1.a * w1 + color2.a * w2 + color3.a * w3 + color4.a * w4)
                );
                newTexture.SetPixel(x, y, color);
            }
        }

        newTexture.Apply();
        return newTexture;
    }

    /// <summary> Texture转Sprite</summary>
    public static Sprite TextureToSprite(Texture texture)
    {
        Sprite sprite = null;
        if (texture)
        {
            Texture2D t2d = (Texture2D)texture;
            sprite = Sprite.Create(t2d, new Rect(0, 0, t2d.width, t2d.height), Vector2.zero);
        }

        return sprite;
    }

    /// <summary> Texture旋转</summary>
    public static Texture2D RotateTexture(Texture2D texture, float eulerAngles)
    {
        int x;
        int y;
        int i;
        int j;
        float phi = eulerAngles / (180 / Mathf.PI);
        float sn = Mathf.Sin(phi);
        float cs = Mathf.Cos(phi);
        Color32[] arr = texture.GetPixels32();
        Color32[] arr2 = new Color32[arr.Length];
        int W = texture.width;
        int H = texture.height;
        int xc = W / 2;
        int yc = H / 2;

        for (j = 0; j < H; j++)
        {
            for (i = 0; i < W; i++)
            {
                arr2[j * W + i] = new Color32(0, 0, 0, 0);

                x = (int)(cs * (i - xc) + sn * (j - yc) + xc);
                y = (int)(-sn * (i - xc) + cs * (j - yc) + yc);

                if ((x > -1) && (x < W) && (y > -1) && (y < H))
                {
                    arr2[j * W + i] = arr[y * W + x];
                }
            }
        }

        Texture2D newImg = new Texture2D(W, H);
        newImg.SetPixels32(arr2);
        newImg.Apply();

        return newImg;
    }
}
